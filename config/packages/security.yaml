security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    auth.profile.provider:
      id: App\Account\Infrastructure\Security\AccountUserProvider

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    # profile:
    #   pattern: ^/*
    #   stateless: true
    #   lazy: true
    #   provider: auth.profile.provider
    #   custom_authenticators:
    #     - auth.profile.header_user_id_auth
    #     - auth.profile.query_user_id_auth

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/auth/signup, roles: PUBLIC_ACCESS }
    - { path: ^/auth/signin, roles: PUBLIC_ACCESS }
    - { path: ^/system/*, roles: PUBLIC_ACCESS }
    - { path: ^/*, roles: IS_AUTHENTICATED_FULLY }

  role_hierarchy:
    ROLE_SUPER_ADMIN:
      - ROLE_ADMIN
      - ROLE_ALLOWED_TO_SWITCH

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
